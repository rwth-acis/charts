## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

## Extra objects to deploy (value evaluated as a template)
##
extraDeploy: []

## File Service Configuration
##
replicaCount: 1

image:
  registry: ghcr.io
  repository:  rwth-acis/activitytracker
  tag: postgres-test
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

initImage:
  registry: ghcr.io
  repository: rwth-acis/activitytracker-init
  tag: postgres-test
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

service:
  type: ClusterIP
  # HTTP Port
  port: 8081
  l2pport: 9012
  nodePorts:
    http: ""
    https: ""
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  # Can be set to work around dual stack obscurities
  ipFamily:
    enabled: false
    ipFamilyPolicy: SingleStack
    ipFamilies: ["IPv4"]

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes#configure-probes
livenessProbe:
  enabled: false
  httpGet:
    path: /healthz
    port: "{{ .Values.frontend.service.port }}"
  initialDelaySeconds: foo
  periodSeconds: bar
  timeoutSeconds: foo
  failureThreshold: bar
  successThreshold: foo
readinessProbe:
  enabled: false
  httpGet:
    path: /readyz
    port: "{{ .Values.frontend.service.port }}"
  initialDelaySeconds: foo
  periodSeconds: bar
  timeoutSeconds: foo
  failureThreshold: bar
  successThreshold: foo

## Command and args for running the container (set to default if not set). Use array form
##
command: []
args: []

## file_service resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    memory: "800Mi"
    cpu: "800m"
  requests:
    memory: "600Mi"
    cpu: "400m"

## file_service containers' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context#set-the-security-context-for-a-container
##
containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: true

## file_service pods' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: true
  fsGroup: 1000

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## Affinity for pod assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Node labels for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Pod extra labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Annotations for server pods.
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## backend pods' priority.
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
# priorityClassName: ""

## lifecycleHooks for the backend container to automate configuration before or after startup.
##
lifecycleHooks: {}

## Custom Liveness probes for backend
##
customLivenessProbe: {}

## Custom Rediness probes backend
##
customReadinessProbe: {}

## Update strategy - only really applicable for deployments with RWO PVs attached
## If replicas = 1, an update can get "stuck", as the previous pod remains attached to the
## PV, and the "incoming" pod can never start. Changing the strategy to "Recreate" will
## terminate the single previous pod, so that the new, incoming pod can attach to the PV
##
updateStrategy:
  type: RollingUpdate

config:
  debug: false
  # Specify a bootstrap node. If left out the node will set up its own network
  # bootstrap: bootstrap.svc
  base_url: https://requirements-bazaar.org/activities/
  db:
    username: reqbaztrack
    host: activity-tracker-postgresql
    # Database passwords can only be specified via a secret.
    # When using the bundled postgres database one will be automatically created
    passwordSecret: activity-tracker-postgresql
    # The key to mount from the secret
    secretKey: postgresql-password


## Configures the persistent volume for the node storage
persistence:
  # Specify an existing pvc here. The other values will have no effect then
  # Otherwise a new pvc will be generated
  existingClaim: ""
  # Uncomment if not the default should be used.
  #storageClass: -
  size: 5G
  accessModes:
    - ReadWriteOnce


## Additional environment variables to set
## Example:
## extraEnvVars:
##   - name: FOO
##     value: "bar"
##
extraEnvVars: []

## ConfigMap with extra environment variables
##
extraEnvVarsCM:

## Secret with extra environment variables
##
extraEnvVarsSecret:

## Extra volumes to add to the deployment
##
extraVolumes: []

## Extra volume mounts to add to the container
##
extraVolumeMounts: []

## Add init containers to the backend pods.
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: {}

## Add sidecars to the backend pods.
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: {}

## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:

## This configures a postgresql instance to be used
## Set install to true to install a new postgres instance
## If you use an operator set to false and provide the secret references
## Additional options, as defined in https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml can be specified as well
postgresql:
  install: true
  postgresqlUsername: reqbaztrack
  postgresqlDatabase: reqbaztrack

  # OVERRIDE THIS
  # Needs to be set for save helm upgrades without losing access to your database
  postgresqlPassword: password
